import path from "path";
import FabricCAServices from "fabric-ca-client";

import {
  Gateway,
  Wallets,
  Wallet,
  Network,
  Contract,
  X509Identity,
} from "fabric-network";

import logger from './logger'

import * as connectionProfile from "../config/connection-profile.json";

/*  Loads env variables */
const {
  CA_URL = "http://localhost:7054",
  WALLET_USER_IDENTITY = "admin",
  WALLET_PASSWORD_IDENTITY = "adminpw",
  MSPID = 'Org1MSP',
  DISCOVERY = "true",
  ISLOCAL = "true",
  CHANNEL_NAME = "mychannel",
  CHAINCODE_NAME = "mycc",
  SMART_CONTRACT_NAME = "RealEstateContract",
} = process.env;

export default class HyperledgerFabric {
  static wallet: Wallet;

  /*  This method uses a wallet and a connection profile 
    to establish a gateway connection to the wanted network, returning the network object.  */
  static async getNetwork(): Promise<Network> {
    try {
      const gateway: Gateway = new Gateway();

      const connectionOptions = {
        identity: WALLET_USER_IDENTITY,
        wallet: this.wallet,
        discovery: {
          enabled: DISCOVERY == "true",
          asLocalhost: ISLOCAL == "true",
        },
      };

      await gateway.connect(connectionProfile, connectionOptions);

      const network: Network = await gateway.getNetwork(CHANNEL_NAME);

      return network;
    } catch (error) {
      throw error;
    }
  }

  static async getContract(): Promise<Contract> {
    try {
      const network: Network = await this.getNetwork();

      const contract: Contract = await network.getContract(
        CHAINCODE_NAME,
        SMART_CONTRACT_NAME
      );

      return contract;
    } catch (error) {
      throw error;
    }
  }

  /* Creates a valid identity to be able to make transactions. Save it into the filesystem wallet  */
  static async createIdentity(): Promise<void> {
    try {
      const walletPath = path.join("wallet");

      this.wallet = await Wallets.newFileSystemWallet(walletPath);

      const doesIdentityExists = await this.wallet.get(WALLET_USER_IDENTITY);

      if (doesIdentityExists) {
        logger.info({
          message: 'Identity already exists'
        });
        
        return;
      }

      const ca = new FabricCAServices(CA_URL);

      logger.info({
        message: 'Enrolling identity..'
      });
      

      const enrollment = await ca.enroll({
        enrollmentID: WALLET_USER_IDENTITY,
        enrollmentSecret: WALLET_PASSWORD_IDENTITY,
      });

      logger.info({
        message: 'Generating an identity..'
      });
  
      const identity: X509Identity = {
        credentials: {
          // PEM format certificate string
          certificate: enrollment.certificate,
          // PKCS11 key generated by the crypto suite
          // with the HSM handles to the actual keys
          privateKey: enrollment.key.toBytes(),
        },
        mspId: MSPID,
        type: "X.509",
      };

      logger.info({
        message: 'Saving identity to wallet...'
      });

      await this.wallet.put(WALLET_USER_IDENTITY, identity);

      logger.info({
        message: 'Identity saved into wallet!'
      });
      
    } catch (error) {
      console.log(JSON.stringify(error, null, 2));

      throw error;
    }
  }
}
